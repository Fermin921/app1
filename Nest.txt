
Comando para ejecutar el proyecto en produccion: npm start 
Comando para ejecutar el proyecto en desarrollo: npm run start:dev todo cambio que se haga se refrescara en la pagina
Convertir todo el codido convertido para produccion: npm run build
Vigila si existen reglas que se esten saltando, como variables sin usar: npm run lint

app.controller.spec.ts es un archivo para el testing
app.controller mantiene la logica del modulo principal
app.module une a todos los demas archivos
main.ts es el archivo principal que manda llamar los modulos para mostrarlos.

Comando para crear un nuevo modulo: nest generate module "nombre del modulo"
Tambien se puede "nest g mo nombre del modulo"

Controllers:
Son funciones que se llaman cuando se consulta una ruta

Creando un archivo controller.ts:
import { Controller, Get} from "@nestjs/common";

@Controller({})
export class TaskController {
    @Get("/task") //Asi se crea una nueva ruta
    getAllTask() { //Funcion que ejecuta cuando se llama la ruta
        return 'Apoco si tilin'
    }
}

Si se realiza de manera manual, debemos importarlo dentro del app.module en el apartado de controllers
Tambien se puede realizar con comando: nest generate controller "Nombre_Controllador"
Mas simplicado se puede realizar con comando: nest g co "Nombre_Controlador"

Ademas del controlador se crea con su archivo de testing, para no crearlo podemos evitarlo con el comando: nest g co "Nombre_controlador" --no-spec 

Services: 
Es cuando se da el caso, de reutilizar codigo para utilizar en varias partes de la aplicacion 

Utiliza el decorador @injectable, indica que podemos injectar codigo dentro de cualquier parte de la aplicacion 
Para crear un archivo de servicios: nest g service "nombre_servicio"
Otra manera sin el archivo de spec: nest g s "nombre_servicio" --no-spec 

Tomar en cuenta que para el service sea reconocido debemos importarlo dentro de module, en caso de hacer manual, utilizando "providers" y agregar el servicio 
@Module({
    providers: [TaskService]
})

De esta manera definimos el service para poder utilizarlo en otras partes:
@Injectable()
export class TaskService {
    getTask(){
        return ['task', 'task2', 'task3']
    }
}

Para utilizar el servide dentro del controlador:
    //Para poder utilizar la funcion del service
    // taskService: TaskService
    // constructor(taskService: TaskService){
    //     this.taskService = taskService;
    // }

    //Otra manera de realizar para utilizar la funcion del service mas simplificada
    constructor(private taskService:TaskService){}

    @Get('/task')
    getAllTasks(){
        return this.taskService.getTask(); //regresa la funcion que recibimos del service
    }

Response: 
Se puede hacer uso de la respuestas de express, utilizando el request, response y next()
para esto debemos ir dentro del controller e importarlos desde express

import { Request,Response } from "express";
    @Get('/response')
    index(@Req() request:Request, @Res() response:Response){
        response.status(200).json({
            message:'Respuesta'
        });
    }

Request Body:
Para recibir la informacion de las peticiones dentro del body 
Dentro del controlador:
    //Manera de implementar el decorador post y ademas el preparar para recibir informacion atraves del body de la peticion
    @Post()
    createTask(@Body() task:any){
        return this.taskService.createTask(task); 
    }
En el service: 
    createTask(task:any){
        this.task.push(task);
        return task;
    }

Para tambien recibir el dato sobre los query para filtrar o dependiendo el caso:
    //De esta manera dejamos definido tambien el poder recibir el valor para algun filtrado que se haya agregado dentro de la peticion
    @Get()
    getAllTasks(@Query() query: any) {
        console.log(query);
        return this.taskService.getTask();
    }

Params: 
Controller:
    @Get()
    getTask(@Param('id') id:string){
        return this.taskService.getTask(parseInt(id));
    }

Service:
    //La funcion que espera el parametro de id que viene dentro de la peticion y para buscarlo dentro de un arreglo de task
    getTask(id:number){
        return this.task.find(task => task.id === id);
    }

DTOs:
Especificac los datos que vamos a recibir o que es lo queremos recibir, funciona como un molde
export interface CreateTaskDto{
    title: string,
    descripcion: string,
}
ademas hay una manera de establecer valores de manera opcional utilizando el signo de ?
y para las peticiones se crearian del tipo dto, por ejemplo:
    @Post()
    createTask(@Body() task:create_task_dto){
        return this.taskService.createTask(task); 
    }

Validaciones: 
Hay bibliotecas que por defecto recomienda nest para poder hacer validaciones y mezclarlas con los Dtos 


import { IsString } from "class-validator"
export class CreateTaskDto{

    @IsString()
    title: string

    @IsString()
    descripcion: string
}
De esta manera hacemos usar la libreria y usando los decoradores para poder realizar las validaciones correspondientes
Pero para que las haga debemos de mandarlas llamar al controller que ejecuta toda la logica

De esta manera ya estariamos validando los datos del dto, cada que se ejecute la funcion de la ruta llamada
  @Post()
    @UsePipes(new ValidationPipe())
    createTask(@Body() task:any){
        return this.taskService.createTask(task); 
    }

Para no a√±adir cada pide en cada controller, se puede hacer de manera global para que todos se usen siempre y cuando se tengan Dtose

En el main.ts:
Agregar app.useGlobalPipes(new ValidationPipe())

y agregango whithelist:true, eliminara los campos extras que se manden y no se tengan dentro de los dtos o  que no sean esperados

Para personalizar los estatus de las peticiones, se hace usando el decorador de @HttpCode('')

Pipes:
Es una funcion que procesa algo y lo retorna ya modificado o alterado.


